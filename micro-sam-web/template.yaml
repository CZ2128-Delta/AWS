AWSTemplateFormatVersion: 2010-09-09
Description: >-
  micro-sam-web
Transform:
- AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    MemorySize: 4096
    Tracing: Active
  Api:
    TracingEnabled: true

Parameters:
  AllowedMethods:
    Type: String
    Default: "'OPTIONS, POST, GET'"
  AllowedHeaders:
    Type: String
    Default: "'Content-Type'"
  AllowedOrigin:
    Type: String
    Default: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is an API gateway associated with the getByIdFunction and putItemFunctions
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: !Ref AllowedMethods
        AllowHeaders: !Ref AllowedHeaders
        AllowOrigin: !Ref AllowedOrigin #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html
        # AllowOrigin: !Join [ "", ["https://", !GetAtt CloudFrontDistribution.DomainName, "/*"] ]

  loginCheck:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/loginCheck
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "login check function"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login-check
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  createProject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/createProject
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "create a new project in bucket function"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-project
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  changeProgress:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/changeProgress
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "change the project's progress"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /change-progress
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  getInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/getInfo
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "Get user projects' info"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-info
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  # generatePresignedURL:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: backend/src/generatePresignedURL
  #     Handler: lambda-handler.lambda_handler
  #     Runtime: python3.10
  #     Architectures:
  #     - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: "generate presigned url for upload function"
  #     Environment:
  #       Variables:
  #         FILE_BUCKET: !Ref FileS3Bucket
  #         IDENTITY_POOL_ID: !Ref IdentityPool
  #         COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
  #         ALLOW_ORIGIN: !Ref AllowedOrigin
  #         ALLOW_METHOD: !Ref AllowedMethods
  #         ALLOW_HEADERS: !Ref AllowedHeaders
  #     Policies:
  #     - AWSLambdaBasicExecutionRole
  #     - Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #             - s3:ListBucket
  #           Resource: 
  #             - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
  #             - !GetAtt FileS3Bucket.Arn
  #         - Effect: Allow
  #           Action: cognito-idp:GetUser
  #           Resource: "*"
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /generate-presigned-url
  #           Method: POST
  #           RestApiId:
  #             Ref: ApiGatewayApi

  # successUpload:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: backend/src/successUpload
  #     Handler: lambda-handler.lambda_handler
  #     Runtime: python3.10
  #     Architectures:
  #     - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: "success uploading function which will modify the modify_time in json"
  #     Environment:
  #       Variables:
  #         FILE_BUCKET: !Ref FileS3Bucket
  #         IDENTITY_POOL_ID: !Ref IdentityPool
  #         COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
  #         ALLOW_ORIGIN: !Ref AllowedOrigin
  #         ALLOW_METHOD: !Ref AllowedMethods
  #         ALLOW_HEADERS: !Ref AllowedHeaders
  #     Policies:
  #     - AWSLambdaBasicExecutionRole
  #     - Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #             - s3:ListBucket
  #           Resource: 
  #             - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
  #             - !GetAtt FileS3Bucket.Arn
  #         - Effect: Allow
  #           Action: cognito-idp:GetUser
  #           Resource: "*"
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /success-upload
  #           Method: POST
  #           RestApiId:
  #             Ref: ApiGatewayApi

  deleteProject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/deleteProject
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "delete selected project"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:DeleteObject
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /delete-project
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  preprocessParameters:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/preprocessParameters
      Handler: lambda-handler.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: "generate presigned url for upload function"
      Environment:
        Variables:
          FILE_BUCKET: !Ref FileS3Bucket
          IDENTITY_POOL_ID: !Ref IdentityPool
          COGNITO_IDP: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
          ALLOW_ORIGIN: !Ref AllowedOrigin
          ALLOW_METHOD: !Ref AllowedMethods
          ALLOW_HEADERS: !Ref AllowedHeaders
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Join [ "", [ "arn:aws:s3:::", !Ref FileS3Bucket, "/*" ] ]
              - !GetAtt FileS3Bucket.Arn
          - Effect: Allow
            Action: cognito-idp:GetUser
            Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /preprocess-parameters
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  ################################
  # Resources related to mrc2png #
  ################################

  # Configure VPC, Security Group, Subnets #
  EfsLambdaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: EfsLambdaVpc

  EfsLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS + Lambda on SAM Security Group
      VpcId: !Ref EfsLambdaVpc
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp

  PublicSubset:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EfsLambdaVpc
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  EfsLambdaSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EfsLambdaVpc
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.0.0/24

  EfsLambdaSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EfsLambdaVpc
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.1.0/24

  # Configure Internet Gateway #
  EfsLambdaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: EfsLambdaInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EfsLambdaVpc
      InternetGatewayId: !Ref EfsLambdaInternetGateway

  # Configure NAT Gateway In Public Subnet #
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NatGatewayEIP, AllocationId]
      SubnetId: !Ref PublicSubset

  # Configure Routes Of Subnets #
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EfsLambdaVpc
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EfsLambdaVpc
      Tags:
      - Key: Name
        Value: PrivateRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EfsLambdaInternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AssociationPublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubset
      RouteTableId: !Ref PublicRouteTable

  AssociationSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref EfsLambdaSubnetA
      RouteTableId: !Ref PrivateRouteTable

  AssociationSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref EfsLambdaSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # Configure EFS #
  EfsFileSystem:
    Type: AWS::EFS::FileSystem

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref EfsLambdaSubnetA
      SecurityGroups:
      - !Ref EfsLambdaSecurityGroup

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref EfsLambdaSubnetB
      SecurityGroups:
      - !Ref EfsLambdaSecurityGroup

  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        Path: /lambda
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '777'

  # Configure Lambda Function #
  mrc2png:
    Type: AWS::Serverless::Function
    DependsOn:
    - MountTargetA
    - MountTargetB
    Properties:
      CodeUri: backend/src/mrc2png/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
      - x86_64
      Description: "parse mrc into pngs when mrc is uploaded to s3"
      Policies:
      - S3FullAccessPolicy:
          BucketName: !Sub "${AWS::StackName}-files3bucket-${AWS::AccountId}"
      - EFSWriteAccessPolicy:
          FileSystem: !Ref EfsFileSystem
          AccessPoint: !Ref AccessPoint
      VpcConfig:
        SecurityGroupIds:
        - !Ref EfsLambdaSecurityGroup
        SubnetIds:
        - !Ref EfsLambdaSubnetA
        - !Ref EfsLambdaSubnetB
      FileSystemConfigs:
      - Arn: !GetAtt AccessPoint.Arn
        LocalMountPath: /mnt/lambda
      Events:
        S3UploadMrcEvent:
          Type: S3
          Properties:
            Bucket: !Ref FileS3Bucket
            Events:
            - 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .mrc

  #-------------------------------------#
  # End of resources related to mrc2png #
  #-------------------------------------#

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: AWS::S3::Bucket
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, /*]]
          Condition:
            StringEquals:
              AWS:SourceArn: !Join ['', ['arn:aws:cloudfront::', !Ref "AWS::AccountId",
                  ":distribution/", !Ref CloudFrontDistribution]]

  FileS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-files3bucket-${AWS::AccountId}"
  FileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowLambdaAccess
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: '*'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref FileS3Bucket, /*]]

  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
          Id: myS3Origin
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - GET
          - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: login
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: false
      RefreshTokenValidity: 30
      IdTokenValidity: 6
      AccessTokenValidity: 6
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - http://localhost:3000
        - !Join
          - ''
          - - 'https://'
            - !GetAtt CloudFrontDistribution.DomainName
      LogoutURLs:
        - http://localhost:3000
        - !Join
          - ''
          - - 'https://'
            - !GetAtt CloudFrontDistribution.DomainName
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-user-pool-domain
      UserPoolId: !Ref UserPool

  UserPoolUICustomization: 
    Type: AWS::Cognito::UserPoolUICustomizationAttachment 
    Properties: 
      UserPoolId: !Ref UserPool
      ClientId: !Ref UserPoolClient 
      CSS: |
        .logo-customizable {
            max-width: 60%;
            max-height: 30%;
        }

        .banner-customizable {
            padding: 25px 0px 25px 0px;
            background-color: rgb(255,255,255);
        }

        .label-customizable {
            font-weight: 800;
        }

        .textDescription-customizable {
            padding-top: 10px;
            padding-bottom: 10px;
            display: block;
            font-size: 15px;
        }

        .idpDescription-customizable {
            padding-top: 10px;
            padding-bottom: 10px;
            display: block;
            font-size: 16px;
        }

        .legalText-customizable {
            color: #747474;
            font-size: 11px;
        }

        .submitButton-customizable {
            font-size: 14px;
            font-weight: bold;
            margin: 20px 0px 10px 0px;
            height: 40px;
            width: 100%;
            color: #fff;
            background-color: #5c4eff;
        }

        .submitButton-customizable:hover {
          color: #fff;
          background-color: #5c4eff;
          transform: translateY(-2px);
          transition: transform 0.5s;
        }

        .errorMessage-customizable {
            padding: 5px;
            font-size: 14px;
            width: 100%;
            background: #F5F5F5;
            border: 2px solid #D64958;
            color: #D64958;
        }

        .inputField-customizable {
            width: 100%;
            height: 34px;
            color: #555;
            background-color: #fff;
            border: 1px solid #ccc;
        }

        .inputField-customizable:focus {
            border-color: #66afe9;
            outline: 0;
        }

        .idpButton-customizable {
            height: 40px;
            width: 100%;
            width: 100%;
            text-align: center;
            margin-bottom: 15px;
            color: #fff;
            background-color: #5bc0de;
            border-color: #46b8da;
        }

        .idpButton-customizable:hover {
            color: #fff;
            background-color: #31b0d5;
        }

        .socialButton-customizable {
            border-radius: 2px;
            height: 40px;
            margin-bottom: 15px;
            padding: 1px;
            text-align: left;
            width: 100%;
        }

        .redirect-customizable {
            text-align: center;
        }

        .passwordCheck-notValid-customizable {
            color: #DF3312;
        }

        .passwordCheck-valid-customizable {
            color: #19BF00;
        }

        .background-customizable {
            background-color: #fff;
        }

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true
  
  IdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: fromcloudformation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/${cognito-identity.amazonaws.com:sub}/*']]
                  # "arn:aws:s3:::testiamroleqyf/${cognito-identity.amazonaws.com:sub}/*"

  IdentityPoolRoleAttach:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt IdentityPoolRole.Arn

Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
  FileS3BucketName:
    Description: S3 Bucket for hosting files
    Value: !Ref FileS3Bucket
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  UserPoolDomain:
    Value: !Ref UserPoolDomain
  IdentityPoolId:
    Value: !Ref IdentityPool
  HostedUIURL:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref UserPoolDomain
        - '.auth.'
        - !Ref 'AWS::Region'
        - '.amazoncognito.com/oauth2/authorize?response_type=token&client_id='
        - !Ref UserPoolClient
        - '&redirect_uri='
        - !Join
          - ''
          - - 'https://'
            - !GetAtt CloudFrontDistribution.DomainName
  LogoutURL:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref UserPoolDomain
        - '.auth.'
        - !Ref 'AWS::Region'
        - '.amazoncognito.com/logout?client_id='
        - !Ref UserPoolClient
        - '&logout_uri='
        - !Join
          - ''
          - - 'https://'
            - !GetAtt CloudFrontDistribution.DomainName
